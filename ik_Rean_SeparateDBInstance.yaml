AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A cloudformation template that accepts user inputs as parameters where applicable (for example, Admin password). This template should setup VPC, create subnets, launch a CM instance,
  pull the necessary code (modules, classes, recipes etc) from a GIT repo (or S3), and configure the web instance for basic Drupal or Wordpress setup.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: The instance must be a either t.2micro or t2.small instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '10.0.0.240/32' #AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBName:
    Default: wordpressdb
    Description: WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '20'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      must begin with a letter and contain only alphanumeric characters (1 to 20)
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      must begin with a letter and contain only alphanumeric characters. (1 to 16 characters)
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '20'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: >-
      must contain only alphanumeric characters. (8 to 20 characters)
  DBRootPassword:
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
    MinLength: '8'
    MaxLength: '20'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: >-
      must contain only alphanumeric characters. (8 to 20 characters)
  Hostname:
    Description: Database Endpoint
    Type: String
    Default: localhost
    ConstraintDescription: Endpoint of the MYSQL DB
  DBPort:
      Description: Database Endpoint Port
      Type: String
      Default: '3306'
      ConstraintDescription: Endpoint  port for MYSQL DB
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-60aa3700
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-4b694d2b
Resources:
  IshanVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'True'
      EnableDnsHostnames: 'True'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-VPC'
  ikPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: 'True'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-Public'
      VpcId: !Ref IshanVPC
  ikPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: 'False'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-Private'
        - Key: Network
          Value: private
      VpcId: !Ref IshanVPC
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-IGW'
  VGAIGW:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref IshanVPC
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref IshanVPC
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-PublicRT'
  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref IshanVPC
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-PrivateRT'
  RoutePublicDefault:
    DependsOn:
      - VGAIGW
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  RouteAssociationPublicDefault:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ikPublicSubnet
      RouteTableId: !Ref RouteTablePublic
  RouteAssociationPrivateDefault:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ikPrivateSubnet
      RouteTableId: !Ref RouteTablePrivate
  ikNAT:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VGAIGW
    Properties:
      AllocationId: !GetAtt
        - EIPNAT
        - AllocationId
      SubnetId: !Ref ikPublicSubnet
  EIPNAT:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ikNAT
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref IshanVPC
  WebServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_chefdk
            - install_chef
            - install_wordpress
            - run_chef
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_chef:
          sources:
            /var/chef/chef-repo: 'http://github.com/opscode/chef-repo/tarball/master'
          files:
            /tmp/install.sh:
              source: 'https://www.opscode.com/chef/install.sh'
              mode: '000400'
              owner: root
              group: root
            /var/chef/chef-repo/.chef/knife.rb:
              content: !Join
                - ''
                - - |
                    cookbook_path [ '/var/chef/chef-repo/cookbooks' ]
                  - |
                    node_path [ '/var/chef/chef-repo/nodes' ]
              mode: '000400'
              owner: root
              group: root
            /var/chef/chef-repo/.chef/client.rb:
              content: !Join
                - ''
                - - |
                    cookbook_path [ '/var/chef/chef-repo/cookbooks' ]
                  - |
                    node_path [ '/var/chef/chef-repo/nodes' ]
              mode: '000400'
              owner: root
              group: root
          commands:
            01_make_chef_readable:
              command: chmod +rx /var/chef
            02_install_chef:
              command: bash /tmp/install.sh
              cwd: /var/chef
            03_create_node_list:
              command: chef-client -z -c /var/chef/chef-repo/.chef/client.rb
              cwd: /var/chef/chef-repo
              env:
                HOME: /var/chef
        install_chefdk:
          packages:
            rpm:
              chefdk: >-
                https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm
        install_wordpress:
          files:
            /var/chef/chef-repo/.chef/knife.rb:
              content: !Join
                - ''
                - - >
                    cookbook_path [
                    '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]
                  - |
                    node_path [ '/var/chef/chef-repo/nodes' ]
              mode: '000400'
              owner: root
              group: root
            /var/chef/chef-repo/.chef/client.rb:
              content: !Join
                - ''
                - - >
                    cookbook_path [
                    '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]
                  - |
                    node_path [ '/var/chef/chef-repo/nodes' ]
              mode: '000400'
              owner: root
              group: root
            /var/chef/chef-repo/cookbooks/wordpress/attributes/default.rb:
              content: !Join
                - ''
                - - 'node[''wordpress''][''db''][''pass''] = '''
                  - !Ref DBPassword
                  - |
                    '
                  - 'node[''wordpress''][''db''][''user''] = '''
                  - !Ref DBUser
                  - |
                    '
                  - 'node[''wordpress''][''db''][''host''] = '''
                  - !Ref WPDbServer
                  - |
                    '
                  - 'node[''wordpress''][''db''][''port''] = '''
                  - !Ref DBPort
                  - |
                    '
                  - 'normal[''wordpress''][''db''][''name''] = '''
                  - !Ref DBName
                  - |
                    '
              mode: '000400'
              owner: root
              group: root
          commands:
            01_get_cookbook:
              command: knife cookbook site download wordpress 2.3.0
              cwd: /var/chef/chef-repo
              env:
                HOME: /var/chef
            02_unpack_cookbook:
              command: tar xvfz /var/chef/chef-repo/wordpress*
              cwd: /var/chef/chef-repo/cookbooks
            03_init_berkshelf:
              command: >-
                berks init /var/chef/chef-repo/cookbooks/wordpress
                --skip-vagrant --skip-git
              cwd: /var/chef/chef-repo/cookbooks/wordpress
              env:
                HOME: /var/chef
            04_vendorize_berkshelf:
              command: berks vendor
              cwd: /var/chef/chef-repo/cookbooks/wordpress
              env:
                HOME: /var/chef
            05_configure_node_run_list:
              command: >-
                knife node run_list add -z `knife node list -z`
                recipe[wordpress]
              cwd: /var/chef/chef-repo
              env:
                HOME: /var/chef
        run_chef:
          commands:
            01_run_chef_client:
              command: chef-client -z -c /var/chef/chef-repo/.chef/client.rb
              cwd: /var/chef/chef-repo
              env:
                HOME: /var/chef
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServer '
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServer '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
      SubnetId: !Ref ikPublicSubnet
  WPDbSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: >-
          Enable MySQL access via port 3306 for web server SecurityGroup
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            SourceSecurityGroupId: !Ref WebServerSecurityGroup
        #  - IpProtocol: tcp
        #    FromPort: '22'
        #    ToPort: '22'
        #    SourceSecurityGroupId: !Ref WebServerSecurityGroup
        VpcId: !Ref IshanVPC
  WPDbServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpressdb_install:
            - install_wordpress
            - configure_wordpress
        install_wordpress:
          packages:
            yum:
              mysql: []
              mysql-server: []
              mysql-devel: []
              mysql-libs: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/setup.mysql:
              content: !Join
                - ''
                - - 'CREATE DATABASE '
                  - !Ref DBName
                  - |
                    ;
                  - CREATE USER '
                  - !Ref DBUser
                  - '''@''localhost'' IDENTIFIED BY '''
                  - !Ref DBPassword
                  - |
                    ';
                  - 'GRANT ALL ON '
                  - !Ref DBName
                  - .* TO '
                  - !Ref DBUser
                  - |
                    '@'localhost';
                  - |
                    FLUSH PRIVILEGES;
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Join
                - ''
                - - mysqladmin -u root password '
                  - !Ref DBRootPassword
                  - ''''
              test: !Join
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command: !Join
                - ''
                - - mysql -u root --password='
                  - !Ref DBRootPassword
                  - ''' < /tmp/setup.mysql'
              test: !Join
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WPDbSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WPDbServer '
            - '         --configsets wordpressdb_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WPDbServer '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
      SubnetId: !Ref ikPrivateSubnet
Outputs:
  VPCID:
    Value: !Ref IshanVPC
  WebsiteURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WebServer
          - PublicDnsName
        - /wordpress
    Description: WordPress Website
